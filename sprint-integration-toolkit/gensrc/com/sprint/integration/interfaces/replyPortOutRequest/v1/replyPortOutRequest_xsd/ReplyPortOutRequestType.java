/**
 * ReplyPortOutRequestType.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.4 Apr 22, 2006 (06:55:48 PDT) WSDL2Java emitter.
 */

package com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd;

public class ReplyPortOutRequestType  implements java.io.Serializable {
    /* EAI populates this with MQ message id, which is unique and
     * is used to identify 'a' message. This field is conditional and will
     * be populated only for 'PortOut Request'. FE doesn't need to display
     * this record, but they need to send this info to EAI to push the respective
     * message. */
    private java.lang.String messageId;

    /* Unique key generated by NPS to identify port */
    private java.lang.String portId;

    private java.lang.String mdn;

    /* Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required */
    private com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortResponseTypeCode responseType;

    /* Supplemental Message Type Code
     * No value on initial port request.  If SUP1/SUP2/SUP3 message, this
     * field will be populated.
     * Valid values:
     * '0'  orig port request
     * '3' = modify */
    private com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.SupplementalMessageTypeIdentifier supplementalCode;

    private com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.ImplementationPartnerInfoType implementationPartnerInfo;

    private java.util.Calendar dueDateTime;

    private java.lang.String reasonCode;

    private java.lang.String reasonDesc;

    /* Required if SUP = 3. */
    private java.lang.String remarks;

    private com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortDelayCode delayCode;

    public ReplyPortOutRequestType() {
    }

    public ReplyPortOutRequestType(
           java.lang.String messageId,
           java.lang.String portId,
           java.lang.String mdn,
           com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortResponseTypeCode responseType,
           com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.SupplementalMessageTypeIdentifier supplementalCode,
           com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.ImplementationPartnerInfoType implementationPartnerInfo,
           java.util.Calendar dueDateTime,
           java.lang.String reasonCode,
           java.lang.String reasonDesc,
           java.lang.String remarks,
           com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortDelayCode delayCode) {
           this.messageId = messageId;
           this.portId = portId;
           this.mdn = mdn;
           this.responseType = responseType;
           this.supplementalCode = supplementalCode;
           this.implementationPartnerInfo = implementationPartnerInfo;
           this.dueDateTime = dueDateTime;
           this.reasonCode = reasonCode;
           this.reasonDesc = reasonDesc;
           this.remarks = remarks;
           this.delayCode = delayCode;
    }


    /**
     * Gets the messageId value for this ReplyPortOutRequestType.
     * 
     * @return messageId   * EAI populates this with MQ message id, which is unique and
     * is used to identify 'a' message. This field is conditional and will
     * be populated only for 'PortOut Request'. FE doesn't need to display
     * this record, but they need to send this info to EAI to push the respective
     * message.
     */
    public java.lang.String getMessageId() {
        return messageId;
    }


    /**
     * Sets the messageId value for this ReplyPortOutRequestType.
     * 
     * @param messageId   * EAI populates this with MQ message id, which is unique and
     * is used to identify 'a' message. This field is conditional and will
     * be populated only for 'PortOut Request'. FE doesn't need to display
     * this record, but they need to send this info to EAI to push the respective
     * message.
     */
    public void setMessageId(java.lang.String messageId) {
        this.messageId = messageId;
    }


    /**
     * Gets the portId value for this ReplyPortOutRequestType.
     * 
     * @return portId   * Unique key generated by NPS to identify port
     */
    public java.lang.String getPortId() {
        return portId;
    }


    /**
     * Sets the portId value for this ReplyPortOutRequestType.
     * 
     * @param portId   * Unique key generated by NPS to identify port
     */
    public void setPortId(java.lang.String portId) {
        this.portId = portId;
    }


    /**
     * Gets the mdn value for this ReplyPortOutRequestType.
     * 
     * @return mdn
     */
    public java.lang.String getMdn() {
        return mdn;
    }


    /**
     * Sets the mdn value for this ReplyPortOutRequestType.
     * 
     * @param mdn
     */
    public void setMdn(java.lang.String mdn) {
        this.mdn = mdn;
    }


    /**
     * Gets the responseType value for this ReplyPortOutRequestType.
     * 
     * @return responseType   * Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required
     */
    public com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortResponseTypeCode getResponseType() {
        return responseType;
    }


    /**
     * Sets the responseType value for this ReplyPortOutRequestType.
     * 
     * @param responseType   * Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required
     */
    public void setResponseType(com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortResponseTypeCode responseType) {
        this.responseType = responseType;
    }


    /**
     * Gets the supplementalCode value for this ReplyPortOutRequestType.
     * 
     * @return supplementalCode   * Supplemental Message Type Code
     * No value on initial port request.  If SUP1/SUP2/SUP3 message, this
     * field will be populated.
     * Valid values:
     * '0'  orig port request
     * '3' = modify
     */
    public com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.SupplementalMessageTypeIdentifier getSupplementalCode() {
        return supplementalCode;
    }


    /**
     * Sets the supplementalCode value for this ReplyPortOutRequestType.
     * 
     * @param supplementalCode   * Supplemental Message Type Code
     * No value on initial port request.  If SUP1/SUP2/SUP3 message, this
     * field will be populated.
     * Valid values:
     * '0'  orig port request
     * '3' = modify
     */
    public void setSupplementalCode(com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.SupplementalMessageTypeIdentifier supplementalCode) {
        this.supplementalCode = supplementalCode;
    }


    /**
     * Gets the implementationPartnerInfo value for this ReplyPortOutRequestType.
     * 
     * @return implementationPartnerInfo
     */
    public com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.ImplementationPartnerInfoType getImplementationPartnerInfo() {
        return implementationPartnerInfo;
    }


    /**
     * Sets the implementationPartnerInfo value for this ReplyPortOutRequestType.
     * 
     * @param implementationPartnerInfo
     */
    public void setImplementationPartnerInfo(com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.ImplementationPartnerInfoType implementationPartnerInfo) {
        this.implementationPartnerInfo = implementationPartnerInfo;
    }


    /**
     * Gets the dueDateTime value for this ReplyPortOutRequestType.
     * 
     * @return dueDateTime
     */
    public java.util.Calendar getDueDateTime() {
        return dueDateTime;
    }


    /**
     * Sets the dueDateTime value for this ReplyPortOutRequestType.
     * 
     * @param dueDateTime
     */
    public void setDueDateTime(java.util.Calendar dueDateTime) {
        this.dueDateTime = dueDateTime;
    }


    /**
     * Gets the reasonCode value for this ReplyPortOutRequestType.
     * 
     * @return reasonCode
     */
    public java.lang.String getReasonCode() {
        return reasonCode;
    }


    /**
     * Sets the reasonCode value for this ReplyPortOutRequestType.
     * 
     * @param reasonCode
     */
    public void setReasonCode(java.lang.String reasonCode) {
        this.reasonCode = reasonCode;
    }


    /**
     * Gets the reasonDesc value for this ReplyPortOutRequestType.
     * 
     * @return reasonDesc
     */
    public java.lang.String getReasonDesc() {
        return reasonDesc;
    }


    /**
     * Sets the reasonDesc value for this ReplyPortOutRequestType.
     * 
     * @param reasonDesc
     */
    public void setReasonDesc(java.lang.String reasonDesc) {
        this.reasonDesc = reasonDesc;
    }


    /**
     * Gets the remarks value for this ReplyPortOutRequestType.
     * 
     * @return remarks   * Required if SUP = 3.
     */
    public java.lang.String getRemarks() {
        return remarks;
    }


    /**
     * Sets the remarks value for this ReplyPortOutRequestType.
     * 
     * @param remarks   * Required if SUP = 3.
     */
    public void setRemarks(java.lang.String remarks) {
        this.remarks = remarks;
    }


    /**
     * Gets the delayCode value for this ReplyPortOutRequestType.
     * 
     * @return delayCode
     */
    public com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortDelayCode getDelayCode() {
        return delayCode;
    }


    /**
     * Sets the delayCode value for this ReplyPortOutRequestType.
     * 
     * @param delayCode
     */
    public void setDelayCode(com.sprint.integration.interfaces.replyPortOutRequest.v1.replyPortOutRequest_xsd.PortDelayCode delayCode) {
        this.delayCode = delayCode;
    }

    private java.lang.Object __equalsCalc = null;
    public synchronized boolean equals(java.lang.Object obj) {
        if (!(obj instanceof ReplyPortOutRequestType)) return false;
        ReplyPortOutRequestType other = (ReplyPortOutRequestType) obj;
        if (obj == null) return false;
        if (this == obj) return true;
        if (__equalsCalc != null) {
            return (__equalsCalc == obj);
        }
        __equalsCalc = obj;
        boolean _equals;
        _equals = true && 
            ((this.messageId==null && other.getMessageId()==null) || 
             (this.messageId!=null &&
              this.messageId.equals(other.getMessageId()))) &&
            ((this.portId==null && other.getPortId()==null) || 
             (this.portId!=null &&
              this.portId.equals(other.getPortId()))) &&
            ((this.mdn==null && other.getMdn()==null) || 
             (this.mdn!=null &&
              this.mdn.equals(other.getMdn()))) &&
            ((this.responseType==null && other.getResponseType()==null) || 
             (this.responseType!=null &&
              this.responseType.equals(other.getResponseType()))) &&
            ((this.supplementalCode==null && other.getSupplementalCode()==null) || 
             (this.supplementalCode!=null &&
              this.supplementalCode.equals(other.getSupplementalCode()))) &&
            ((this.implementationPartnerInfo==null && other.getImplementationPartnerInfo()==null) || 
             (this.implementationPartnerInfo!=null &&
              this.implementationPartnerInfo.equals(other.getImplementationPartnerInfo()))) &&
            ((this.dueDateTime==null && other.getDueDateTime()==null) || 
             (this.dueDateTime!=null &&
              this.dueDateTime.equals(other.getDueDateTime()))) &&
            ((this.reasonCode==null && other.getReasonCode()==null) || 
             (this.reasonCode!=null &&
              this.reasonCode.equals(other.getReasonCode()))) &&
            ((this.reasonDesc==null && other.getReasonDesc()==null) || 
             (this.reasonDesc!=null &&
              this.reasonDesc.equals(other.getReasonDesc()))) &&
            ((this.remarks==null && other.getRemarks()==null) || 
             (this.remarks!=null &&
              this.remarks.equals(other.getRemarks()))) &&
            ((this.delayCode==null && other.getDelayCode()==null) || 
             (this.delayCode!=null &&
              this.delayCode.equals(other.getDelayCode())));
        __equalsCalc = null;
        return _equals;
    }

    private boolean __hashCodeCalc = false;
    public synchronized int hashCode() {
        if (__hashCodeCalc) {
            return 0;
        }
        __hashCodeCalc = true;
        int _hashCode = 1;
        if (getMessageId() != null) {
            _hashCode += getMessageId().hashCode();
        }
        if (getPortId() != null) {
            _hashCode += getPortId().hashCode();
        }
        if (getMdn() != null) {
            _hashCode += getMdn().hashCode();
        }
        if (getResponseType() != null) {
            _hashCode += getResponseType().hashCode();
        }
        if (getSupplementalCode() != null) {
            _hashCode += getSupplementalCode().hashCode();
        }
        if (getImplementationPartnerInfo() != null) {
            _hashCode += getImplementationPartnerInfo().hashCode();
        }
        if (getDueDateTime() != null) {
            _hashCode += getDueDateTime().hashCode();
        }
        if (getReasonCode() != null) {
            _hashCode += getReasonCode().hashCode();
        }
        if (getReasonDesc() != null) {
            _hashCode += getReasonDesc().hashCode();
        }
        if (getRemarks() != null) {
            _hashCode += getRemarks().hashCode();
        }
        if (getDelayCode() != null) {
            _hashCode += getDelayCode().hashCode();
        }
        __hashCodeCalc = false;
        return _hashCode;
    }

    // Type metadata
    private static org.apache.axis.description.TypeDesc typeDesc =
        new org.apache.axis.description.TypeDesc(ReplyPortOutRequestType.class, true);

    static {
        typeDesc.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "ReplyPortOutRequestType"));
        org.apache.axis.description.ElementDesc elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageId");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "messageId"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "MqMessageIdentifier"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("portId");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "portId"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("mdn");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "mdn"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("responseType");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "responseType"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "PortResponseTypeCode"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("supplementalCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "supplementalCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "SupplementalMessageTypeIdentifier"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("implementationPartnerInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "implementationPartnerInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "ImplementationPartnerInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("dueDateTime");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "dueDateTime"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "dateTime"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("reasonCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "reasonCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("reasonDesc");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "reasonDesc"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("remarks");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "remarks"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("delayCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "delayCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/replyPortOutRequest/v1/replyPortOutRequest.xsd", "PortDelayCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
    }

    /**
     * Return type metadata object
     */
    public static org.apache.axis.description.TypeDesc getTypeDesc() {
        return typeDesc;
    }

    /**
     * Get Custom Serializer
     */
    public static org.apache.axis.encoding.Serializer getSerializer(
           java.lang.String mechType, 
           java.lang.Class _javaType,  
           javax.xml.namespace.QName _xmlType) {
        return 
          new  org.apache.axis.encoding.ser.BeanSerializer(
            _javaType, _xmlType, typeDesc);
    }

    /**
     * Get Custom Deserializer
     */
    public static org.apache.axis.encoding.Deserializer getDeserializer(
           java.lang.String mechType, 
           java.lang.Class _javaType,  
           javax.xml.namespace.QName _xmlType) {
        return 
          new  org.apache.axis.encoding.ser.BeanDeserializer(
            _javaType, _xmlType, typeDesc);
    }

}
