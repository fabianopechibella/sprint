/**
 * WholesalePortMessageTypeInfoType.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.4 Apr 22, 2006 (06:55:48 PDT) WSDL2Java emitter.
 */

package com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd;

public class WholesalePortMessageTypeInfoType  implements java.io.Serializable {
    /* NPS populates this MQ message id, which is unique and is used
     * to identify 'a' message.  FE doesn't need to display this record,
     * but they need to send this info to EAI to push the respective message. */
    private java.lang.String messageId;

    /* EAI Message Type Codes
     * 
     * POR - PortOutRequest
     * DDT - DueDateTime
     * PIR - PortInResponse
     * PTS - PortStatus
     * PTA - PortAbandonment
     * PTN - PortNotifications
     * PTC - PortCancel
     * RPR - Reply PortOut Request */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeCode messageTypeCode;

    /* Wholesale Port message type. The possible values are
     * 
     * 1. PortOut Request
     * 2. Due Date and Time
     * 3. PortIn Response
     * 4. Port Status
     * 5. Port Abandonment
     * 6. Port Notification
     * 7. Port Cancellation
     * 8. Reply PortOut Request */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeDescription messageTypeDesc;

    /* A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageActivityCode messageStatusCode;

    /* A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageStatus messageStatusDesc;

    /* The MDN that is to be ported. */
    private java.lang.String mdn;

    /* Unique key generated by NPS to identify port. Every message
     * from NPS contains PortId and is unique */
    private java.lang.String portId;

    /* Unique key generated by SMG to identify port */
    private java.lang.String portRequestNumber;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ResellerPartnerIdInfoType resellerPartnerIdInfo;

    /* Supplemental Message Type Code.  If SUP1/SUP2/SUP3 message,
     * this field will be populated.
     * Valid values:
     * 0 - Initial Port Request(PQI)
     * 1 - Port Cancel( SUP1)
     * 2 - Change DDT(SUP2)
     * 3 - Modify Port information (SUP3) */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SupplementalMessageTypeIdentifier supplementalCode;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingNameInfoType billingNameInfo;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingAddressInfoType billAddressInfo;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SsnTaxIdChoiceTypeType ssnTaxIdInfo;

    /* Customerâ€™s account number with OSP */
    private java.lang.String ospBan;

    /* Password/PIN */
    private java.lang.String passwordPin;

    /* Required if SUP = 3. */
    private java.lang.String remarks;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType newNetWorkServiceProviderInfo;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType oldNetWorkServiceProviderInfo;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ImplementationPartnerInfoType implementationPartnerInfo;

    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDueDateTimeInfoType portDueDateTimeInfo;

    /* Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortResponseTypeCode responseType;

    /* > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required */
    private java.lang.String reasonCode;

    /* > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required */
    private java.lang.String reasonText;

    /* > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDelayCode delayCode;

    /* Will be provided if NPS receives the information
     * Example : 
     * SMG MPE/SOA messages 
     * SOA1010I, SOA1045I, SOA1020I, MPE0001E, MPE0002E, 
     * PICANCEL -  PORT IN is cancelled 
     * POCANCEL - Port out cancel
     * JPRDY - To notify that port will be abandoned in next 10 days
     * ABND - To notify that port is abandoned and cancel in NPS
     * POERROR - Notify resellers PO cancel sent to Ensemble Wholesale failed.
     * Billing not updated port still in progress.
     * PISUBSUS - Subscriber to which port swap was initiated is suspended
     * in Ensemble Wholesale, port in is canceled */
    private java.lang.String messageCode;

    /* Will be provided if NPS receives the information
     * if MSG_CODE = 'JPRDY', this field would include date when the port
     * would be abandoned
     * if MSG_CODE = 'ABND', this field would include date when the port
     * is abandoned in NPS */
    private java.lang.String messageText;

    /* Valid Values:
     * ACT = Activation Request
     * DAC = Deactivation Request */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortActionTypeCode actionCode;

    /* This structure contains all the activites performed on the
     * given port. EAI returns all activities in the data base. */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ActivityRecordListType activityRecordList;

    /* Indicator that tells if the record is 'Auto Rejected' by EAI
     * for a given 'PortOutRequest' from NPS.
     * 
     * This applies only to messages of type 'PortOutRequest' */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SendAutoRejectTypeCode autoRejectStatus;

    /* This indiacator applies to 'PortOutRequest' only, a flag that
     * tells if an MVNO has responded to a 'PortOutRequest' */
    private com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ReplyPortOutRequestCode replyPortOutRequestStatus;

    /* Valid values:
     * Null
     * Y */
    private java.lang.String portCancelInd;

    /* This is the message creation timestamp in EAI ODL table with
     * Central Time Zone */
    private java.util.Calendar messageCreationTime;

    public WholesalePortMessageTypeInfoType() {
    }

    public WholesalePortMessageTypeInfoType(
           java.lang.String messageId,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeCode messageTypeCode,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeDescription messageTypeDesc,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageActivityCode messageStatusCode,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageStatus messageStatusDesc,
           java.lang.String mdn,
           java.lang.String portId,
           java.lang.String portRequestNumber,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ResellerPartnerIdInfoType resellerPartnerIdInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SupplementalMessageTypeIdentifier supplementalCode,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingNameInfoType billingNameInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingAddressInfoType billAddressInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SsnTaxIdChoiceTypeType ssnTaxIdInfo,
           java.lang.String ospBan,
           java.lang.String passwordPin,
           java.lang.String remarks,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType newNetWorkServiceProviderInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType oldNetWorkServiceProviderInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ImplementationPartnerInfoType implementationPartnerInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDueDateTimeInfoType portDueDateTimeInfo,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortResponseTypeCode responseType,
           java.lang.String reasonCode,
           java.lang.String reasonText,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDelayCode delayCode,
           java.lang.String messageCode,
           java.lang.String messageText,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortActionTypeCode actionCode,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ActivityRecordListType activityRecordList,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SendAutoRejectTypeCode autoRejectStatus,
           com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ReplyPortOutRequestCode replyPortOutRequestStatus,
           java.lang.String portCancelInd,
           java.util.Calendar messageCreationTime) {
           this.messageId = messageId;
           this.messageTypeCode = messageTypeCode;
           this.messageTypeDesc = messageTypeDesc;
           this.messageStatusCode = messageStatusCode;
           this.messageStatusDesc = messageStatusDesc;
           this.mdn = mdn;
           this.portId = portId;
           this.portRequestNumber = portRequestNumber;
           this.resellerPartnerIdInfo = resellerPartnerIdInfo;
           this.supplementalCode = supplementalCode;
           this.billingNameInfo = billingNameInfo;
           this.billAddressInfo = billAddressInfo;
           this.ssnTaxIdInfo = ssnTaxIdInfo;
           this.ospBan = ospBan;
           this.passwordPin = passwordPin;
           this.remarks = remarks;
           this.newNetWorkServiceProviderInfo = newNetWorkServiceProviderInfo;
           this.oldNetWorkServiceProviderInfo = oldNetWorkServiceProviderInfo;
           this.implementationPartnerInfo = implementationPartnerInfo;
           this.portDueDateTimeInfo = portDueDateTimeInfo;
           this.responseType = responseType;
           this.reasonCode = reasonCode;
           this.reasonText = reasonText;
           this.delayCode = delayCode;
           this.messageCode = messageCode;
           this.messageText = messageText;
           this.actionCode = actionCode;
           this.activityRecordList = activityRecordList;
           this.autoRejectStatus = autoRejectStatus;
           this.replyPortOutRequestStatus = replyPortOutRequestStatus;
           this.portCancelInd = portCancelInd;
           this.messageCreationTime = messageCreationTime;
    }


    /**
     * Gets the messageId value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageId   * NPS populates this MQ message id, which is unique and is used
     * to identify 'a' message.  FE doesn't need to display this record,
     * but they need to send this info to EAI to push the respective message.
     */
    public java.lang.String getMessageId() {
        return messageId;
    }


    /**
     * Sets the messageId value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageId   * NPS populates this MQ message id, which is unique and is used
     * to identify 'a' message.  FE doesn't need to display this record,
     * but they need to send this info to EAI to push the respective message.
     */
    public void setMessageId(java.lang.String messageId) {
        this.messageId = messageId;
    }


    /**
     * Gets the messageTypeCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageTypeCode   * EAI Message Type Codes
     * 
     * POR - PortOutRequest
     * DDT - DueDateTime
     * PIR - PortInResponse
     * PTS - PortStatus
     * PTA - PortAbandonment
     * PTN - PortNotifications
     * PTC - PortCancel
     * RPR - Reply PortOut Request
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeCode getMessageTypeCode() {
        return messageTypeCode;
    }


    /**
     * Sets the messageTypeCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageTypeCode   * EAI Message Type Codes
     * 
     * POR - PortOutRequest
     * DDT - DueDateTime
     * PIR - PortInResponse
     * PTS - PortStatus
     * PTA - PortAbandonment
     * PTN - PortNotifications
     * PTC - PortCancel
     * RPR - Reply PortOut Request
     */
    public void setMessageTypeCode(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeCode messageTypeCode) {
        this.messageTypeCode = messageTypeCode;
    }


    /**
     * Gets the messageTypeDesc value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageTypeDesc   * Wholesale Port message type. The possible values are
     * 
     * 1. PortOut Request
     * 2. Due Date and Time
     * 3. PortIn Response
     * 4. Port Status
     * 5. Port Abandonment
     * 6. Port Notification
     * 7. Port Cancellation
     * 8. Reply PortOut Request
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeDescription getMessageTypeDesc() {
        return messageTypeDesc;
    }


    /**
     * Sets the messageTypeDesc value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageTypeDesc   * Wholesale Port message type. The possible values are
     * 
     * 1. PortOut Request
     * 2. Due Date and Time
     * 3. PortIn Response
     * 4. Port Status
     * 5. Port Abandonment
     * 6. Port Notification
     * 7. Port Cancellation
     * 8. Reply PortOut Request
     */
    public void setMessageTypeDesc(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortMessageTypeDescription messageTypeDesc) {
        this.messageTypeDesc = messageTypeDesc;
    }


    /**
     * Gets the messageStatusCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageStatusCode   * A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageActivityCode getMessageStatusCode() {
        return messageStatusCode;
    }


    /**
     * Sets the messageStatusCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageStatusCode   * A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried
     */
    public void setMessageStatusCode(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageActivityCode messageStatusCode) {
        this.messageStatusCode = messageStatusCode;
    }


    /**
     * Gets the messageStatusDesc value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageStatusDesc   * A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageStatus getMessageStatusDesc() {
        return messageStatusDesc;
    }


    /**
     * Sets the messageStatusDesc value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageStatusDesc   * A given message can have  one of the following four status
     * at any given point.
     * 1. Message Stored
     * 2. Send Failed
     * 3. Send Successful
     * 4. Message Queried
     */
    public void setMessageStatusDesc(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.MessageStatus messageStatusDesc) {
        this.messageStatusDesc = messageStatusDesc;
    }


    /**
     * Gets the mdn value for this WholesalePortMessageTypeInfoType.
     * 
     * @return mdn   * The MDN that is to be ported.
     */
    public java.lang.String getMdn() {
        return mdn;
    }


    /**
     * Sets the mdn value for this WholesalePortMessageTypeInfoType.
     * 
     * @param mdn   * The MDN that is to be ported.
     */
    public void setMdn(java.lang.String mdn) {
        this.mdn = mdn;
    }


    /**
     * Gets the portId value for this WholesalePortMessageTypeInfoType.
     * 
     * @return portId   * Unique key generated by NPS to identify port. Every message
     * from NPS contains PortId and is unique
     */
    public java.lang.String getPortId() {
        return portId;
    }


    /**
     * Sets the portId value for this WholesalePortMessageTypeInfoType.
     * 
     * @param portId   * Unique key generated by NPS to identify port. Every message
     * from NPS contains PortId and is unique
     */
    public void setPortId(java.lang.String portId) {
        this.portId = portId;
    }


    /**
     * Gets the portRequestNumber value for this WholesalePortMessageTypeInfoType.
     * 
     * @return portRequestNumber   * Unique key generated by SMG to identify port
     */
    public java.lang.String getPortRequestNumber() {
        return portRequestNumber;
    }


    /**
     * Sets the portRequestNumber value for this WholesalePortMessageTypeInfoType.
     * 
     * @param portRequestNumber   * Unique key generated by SMG to identify port
     */
    public void setPortRequestNumber(java.lang.String portRequestNumber) {
        this.portRequestNumber = portRequestNumber;
    }


    /**
     * Gets the resellerPartnerIdInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return resellerPartnerIdInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ResellerPartnerIdInfoType getResellerPartnerIdInfo() {
        return resellerPartnerIdInfo;
    }


    /**
     * Sets the resellerPartnerIdInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param resellerPartnerIdInfo
     */
    public void setResellerPartnerIdInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ResellerPartnerIdInfoType resellerPartnerIdInfo) {
        this.resellerPartnerIdInfo = resellerPartnerIdInfo;
    }


    /**
     * Gets the supplementalCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return supplementalCode   * Supplemental Message Type Code.  If SUP1/SUP2/SUP3 message,
     * this field will be populated.
     * Valid values:
     * 0 - Initial Port Request(PQI)
     * 1 - Port Cancel( SUP1)
     * 2 - Change DDT(SUP2)
     * 3 - Modify Port information (SUP3)
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SupplementalMessageTypeIdentifier getSupplementalCode() {
        return supplementalCode;
    }


    /**
     * Sets the supplementalCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param supplementalCode   * Supplemental Message Type Code.  If SUP1/SUP2/SUP3 message,
     * this field will be populated.
     * Valid values:
     * 0 - Initial Port Request(PQI)
     * 1 - Port Cancel( SUP1)
     * 2 - Change DDT(SUP2)
     * 3 - Modify Port information (SUP3)
     */
    public void setSupplementalCode(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SupplementalMessageTypeIdentifier supplementalCode) {
        this.supplementalCode = supplementalCode;
    }


    /**
     * Gets the billingNameInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return billingNameInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingNameInfoType getBillingNameInfo() {
        return billingNameInfo;
    }


    /**
     * Sets the billingNameInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param billingNameInfo
     */
    public void setBillingNameInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingNameInfoType billingNameInfo) {
        this.billingNameInfo = billingNameInfo;
    }


    /**
     * Gets the billAddressInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return billAddressInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingAddressInfoType getBillAddressInfo() {
        return billAddressInfo;
    }


    /**
     * Sets the billAddressInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param billAddressInfo
     */
    public void setBillAddressInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.BillingAddressInfoType billAddressInfo) {
        this.billAddressInfo = billAddressInfo;
    }


    /**
     * Gets the ssnTaxIdInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return ssnTaxIdInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SsnTaxIdChoiceTypeType getSsnTaxIdInfo() {
        return ssnTaxIdInfo;
    }


    /**
     * Sets the ssnTaxIdInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param ssnTaxIdInfo
     */
    public void setSsnTaxIdInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SsnTaxIdChoiceTypeType ssnTaxIdInfo) {
        this.ssnTaxIdInfo = ssnTaxIdInfo;
    }


    /**
     * Gets the ospBan value for this WholesalePortMessageTypeInfoType.
     * 
     * @return ospBan   * Customerâ€™s account number with OSP
     */
    public java.lang.String getOspBan() {
        return ospBan;
    }


    /**
     * Sets the ospBan value for this WholesalePortMessageTypeInfoType.
     * 
     * @param ospBan   * Customerâ€™s account number with OSP
     */
    public void setOspBan(java.lang.String ospBan) {
        this.ospBan = ospBan;
    }


    /**
     * Gets the passwordPin value for this WholesalePortMessageTypeInfoType.
     * 
     * @return passwordPin   * Password/PIN
     */
    public java.lang.String getPasswordPin() {
        return passwordPin;
    }


    /**
     * Sets the passwordPin value for this WholesalePortMessageTypeInfoType.
     * 
     * @param passwordPin   * Password/PIN
     */
    public void setPasswordPin(java.lang.String passwordPin) {
        this.passwordPin = passwordPin;
    }


    /**
     * Gets the remarks value for this WholesalePortMessageTypeInfoType.
     * 
     * @return remarks   * Required if SUP = 3.
     */
    public java.lang.String getRemarks() {
        return remarks;
    }


    /**
     * Sets the remarks value for this WholesalePortMessageTypeInfoType.
     * 
     * @param remarks   * Required if SUP = 3.
     */
    public void setRemarks(java.lang.String remarks) {
        this.remarks = remarks;
    }


    /**
     * Gets the newNetWorkServiceProviderInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return newNetWorkServiceProviderInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType getNewNetWorkServiceProviderInfo() {
        return newNetWorkServiceProviderInfo;
    }


    /**
     * Sets the newNetWorkServiceProviderInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param newNetWorkServiceProviderInfo
     */
    public void setNewNetWorkServiceProviderInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType newNetWorkServiceProviderInfo) {
        this.newNetWorkServiceProviderInfo = newNetWorkServiceProviderInfo;
    }


    /**
     * Gets the oldNetWorkServiceProviderInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return oldNetWorkServiceProviderInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType getOldNetWorkServiceProviderInfo() {
        return oldNetWorkServiceProviderInfo;
    }


    /**
     * Sets the oldNetWorkServiceProviderInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param oldNetWorkServiceProviderInfo
     */
    public void setOldNetWorkServiceProviderInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.NetworkServiceProviderInfoType oldNetWorkServiceProviderInfo) {
        this.oldNetWorkServiceProviderInfo = oldNetWorkServiceProviderInfo;
    }


    /**
     * Gets the implementationPartnerInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return implementationPartnerInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ImplementationPartnerInfoType getImplementationPartnerInfo() {
        return implementationPartnerInfo;
    }


    /**
     * Sets the implementationPartnerInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param implementationPartnerInfo
     */
    public void setImplementationPartnerInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ImplementationPartnerInfoType implementationPartnerInfo) {
        this.implementationPartnerInfo = implementationPartnerInfo;
    }


    /**
     * Gets the portDueDateTimeInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @return portDueDateTimeInfo
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDueDateTimeInfoType getPortDueDateTimeInfo() {
        return portDueDateTimeInfo;
    }


    /**
     * Sets the portDueDateTimeInfo value for this WholesalePortMessageTypeInfoType.
     * 
     * @param portDueDateTimeInfo
     */
    public void setPortDueDateTimeInfo(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDueDateTimeInfoType portDueDateTimeInfo) {
        this.portDueDateTimeInfo = portDueDateTimeInfo;
    }


    /**
     * Gets the responseType value for this WholesalePortMessageTypeInfoType.
     * 
     * @return responseType   * Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortResponseTypeCode getResponseType() {
        return responseType;
    }


    /**
     * Sets the responseType value for this WholesalePortMessageTypeInfoType.
     * 
     * @param responseType   * Valid Values:
     * C = Confirmation
     * D = Delay
     * R = Resolution Required
     */
    public void setResponseType(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortResponseTypeCode responseType) {
        this.responseType = responseType;
    }


    /**
     * Gets the reasonCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return reasonCode   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public java.lang.String getReasonCode() {
        return reasonCode;
    }


    /**
     * Sets the reasonCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param reasonCode   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public void setReasonCode(java.lang.String reasonCode) {
        this.reasonCode = reasonCode;
    }


    /**
     * Gets the reasonText value for this WholesalePortMessageTypeInfoType.
     * 
     * @return reasonText   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public java.lang.String getReasonText() {
        return reasonText;
    }


    /**
     * Sets the reasonText value for this WholesalePortMessageTypeInfoType.
     * 
     * @param reasonText   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public void setReasonText(java.lang.String reasonText) {
        this.reasonText = reasonText;
    }


    /**
     * Gets the delayCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return delayCode   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDelayCode getDelayCode() {
        return delayCode;
    }


    /**
     * Sets the delayCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param delayCode   * > When responseType = C, reasonCode and reasonDesc are prohibited.
     * > When responseType = D, delayCode is required and reasonCode and
     * reasonDesc are prohibited. 
     * > When responseType = R, reasonCode and reasonDesc are required
     */
    public void setDelayCode(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortDelayCode delayCode) {
        this.delayCode = delayCode;
    }


    /**
     * Gets the messageCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageCode   * Will be provided if NPS receives the information
     * Example : 
     * SMG MPE/SOA messages 
     * SOA1010I, SOA1045I, SOA1020I, MPE0001E, MPE0002E, 
     * PICANCEL -  PORT IN is cancelled 
     * POCANCEL - Port out cancel
     * JPRDY - To notify that port will be abandoned in next 10 days
     * ABND - To notify that port is abandoned and cancel in NPS
     * POERROR - Notify resellers PO cancel sent to Ensemble Wholesale failed.
     * Billing not updated port still in progress.
     * PISUBSUS - Subscriber to which port swap was initiated is suspended
     * in Ensemble Wholesale, port in is canceled
     */
    public java.lang.String getMessageCode() {
        return messageCode;
    }


    /**
     * Sets the messageCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageCode   * Will be provided if NPS receives the information
     * Example : 
     * SMG MPE/SOA messages 
     * SOA1010I, SOA1045I, SOA1020I, MPE0001E, MPE0002E, 
     * PICANCEL -  PORT IN is cancelled 
     * POCANCEL - Port out cancel
     * JPRDY - To notify that port will be abandoned in next 10 days
     * ABND - To notify that port is abandoned and cancel in NPS
     * POERROR - Notify resellers PO cancel sent to Ensemble Wholesale failed.
     * Billing not updated port still in progress.
     * PISUBSUS - Subscriber to which port swap was initiated is suspended
     * in Ensemble Wholesale, port in is canceled
     */
    public void setMessageCode(java.lang.String messageCode) {
        this.messageCode = messageCode;
    }


    /**
     * Gets the messageText value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageText   * Will be provided if NPS receives the information
     * if MSG_CODE = 'JPRDY', this field would include date when the port
     * would be abandoned
     * if MSG_CODE = 'ABND', this field would include date when the port
     * is abandoned in NPS
     */
    public java.lang.String getMessageText() {
        return messageText;
    }


    /**
     * Sets the messageText value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageText   * Will be provided if NPS receives the information
     * if MSG_CODE = 'JPRDY', this field would include date when the port
     * would be abandoned
     * if MSG_CODE = 'ABND', this field would include date when the port
     * is abandoned in NPS
     */
    public void setMessageText(java.lang.String messageText) {
        this.messageText = messageText;
    }


    /**
     * Gets the actionCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @return actionCode   * Valid Values:
     * ACT = Activation Request
     * DAC = Deactivation Request
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortActionTypeCode getActionCode() {
        return actionCode;
    }


    /**
     * Sets the actionCode value for this WholesalePortMessageTypeInfoType.
     * 
     * @param actionCode   * Valid Values:
     * ACT = Activation Request
     * DAC = Deactivation Request
     */
    public void setActionCode(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.PortActionTypeCode actionCode) {
        this.actionCode = actionCode;
    }


    /**
     * Gets the activityRecordList value for this WholesalePortMessageTypeInfoType.
     * 
     * @return activityRecordList   * This structure contains all the activites performed on the
     * given port. EAI returns all activities in the data base.
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ActivityRecordListType getActivityRecordList() {
        return activityRecordList;
    }


    /**
     * Sets the activityRecordList value for this WholesalePortMessageTypeInfoType.
     * 
     * @param activityRecordList   * This structure contains all the activites performed on the
     * given port. EAI returns all activities in the data base.
     */
    public void setActivityRecordList(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ActivityRecordListType activityRecordList) {
        this.activityRecordList = activityRecordList;
    }


    /**
     * Gets the autoRejectStatus value for this WholesalePortMessageTypeInfoType.
     * 
     * @return autoRejectStatus   * Indicator that tells if the record is 'Auto Rejected' by EAI
     * for a given 'PortOutRequest' from NPS.
     * 
     * This applies only to messages of type 'PortOutRequest'
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SendAutoRejectTypeCode getAutoRejectStatus() {
        return autoRejectStatus;
    }


    /**
     * Sets the autoRejectStatus value for this WholesalePortMessageTypeInfoType.
     * 
     * @param autoRejectStatus   * Indicator that tells if the record is 'Auto Rejected' by EAI
     * for a given 'PortOutRequest' from NPS.
     * 
     * This applies only to messages of type 'PortOutRequest'
     */
    public void setAutoRejectStatus(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.SendAutoRejectTypeCode autoRejectStatus) {
        this.autoRejectStatus = autoRejectStatus;
    }


    /**
     * Gets the replyPortOutRequestStatus value for this WholesalePortMessageTypeInfoType.
     * 
     * @return replyPortOutRequestStatus   * This indiacator applies to 'PortOutRequest' only, a flag that
     * tells if an MVNO has responded to a 'PortOutRequest'
     */
    public com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ReplyPortOutRequestCode getReplyPortOutRequestStatus() {
        return replyPortOutRequestStatus;
    }


    /**
     * Sets the replyPortOutRequestStatus value for this WholesalePortMessageTypeInfoType.
     * 
     * @param replyPortOutRequestStatus   * This indiacator applies to 'PortOutRequest' only, a flag that
     * tells if an MVNO has responded to a 'PortOutRequest'
     */
    public void setReplyPortOutRequestStatus(com.sprint.integration.interfaces.queryPortMessage.v1.queryPortMessage_xsd.ReplyPortOutRequestCode replyPortOutRequestStatus) {
        this.replyPortOutRequestStatus = replyPortOutRequestStatus;
    }


    /**
     * Gets the portCancelInd value for this WholesalePortMessageTypeInfoType.
     * 
     * @return portCancelInd   * Valid values:
     * Null
     * Y
     */
    public java.lang.String getPortCancelInd() {
        return portCancelInd;
    }


    /**
     * Sets the portCancelInd value for this WholesalePortMessageTypeInfoType.
     * 
     * @param portCancelInd   * Valid values:
     * Null
     * Y
     */
    public void setPortCancelInd(java.lang.String portCancelInd) {
        this.portCancelInd = portCancelInd;
    }


    /**
     * Gets the messageCreationTime value for this WholesalePortMessageTypeInfoType.
     * 
     * @return messageCreationTime   * This is the message creation timestamp in EAI ODL table with
     * Central Time Zone
     */
    public java.util.Calendar getMessageCreationTime() {
        return messageCreationTime;
    }


    /**
     * Sets the messageCreationTime value for this WholesalePortMessageTypeInfoType.
     * 
     * @param messageCreationTime   * This is the message creation timestamp in EAI ODL table with
     * Central Time Zone
     */
    public void setMessageCreationTime(java.util.Calendar messageCreationTime) {
        this.messageCreationTime = messageCreationTime;
    }

    private java.lang.Object __equalsCalc = null;
    public synchronized boolean equals(java.lang.Object obj) {
        if (!(obj instanceof WholesalePortMessageTypeInfoType)) return false;
        WholesalePortMessageTypeInfoType other = (WholesalePortMessageTypeInfoType) obj;
        if (obj == null) return false;
        if (this == obj) return true;
        if (__equalsCalc != null) {
            return (__equalsCalc == obj);
        }
        __equalsCalc = obj;
        boolean _equals;
        _equals = true && 
            ((this.messageId==null && other.getMessageId()==null) || 
             (this.messageId!=null &&
              this.messageId.equals(other.getMessageId()))) &&
            ((this.messageTypeCode==null && other.getMessageTypeCode()==null) || 
             (this.messageTypeCode!=null &&
              this.messageTypeCode.equals(other.getMessageTypeCode()))) &&
            ((this.messageTypeDesc==null && other.getMessageTypeDesc()==null) || 
             (this.messageTypeDesc!=null &&
              this.messageTypeDesc.equals(other.getMessageTypeDesc()))) &&
            ((this.messageStatusCode==null && other.getMessageStatusCode()==null) || 
             (this.messageStatusCode!=null &&
              this.messageStatusCode.equals(other.getMessageStatusCode()))) &&
            ((this.messageStatusDesc==null && other.getMessageStatusDesc()==null) || 
             (this.messageStatusDesc!=null &&
              this.messageStatusDesc.equals(other.getMessageStatusDesc()))) &&
            ((this.mdn==null && other.getMdn()==null) || 
             (this.mdn!=null &&
              this.mdn.equals(other.getMdn()))) &&
            ((this.portId==null && other.getPortId()==null) || 
             (this.portId!=null &&
              this.portId.equals(other.getPortId()))) &&
            ((this.portRequestNumber==null && other.getPortRequestNumber()==null) || 
             (this.portRequestNumber!=null &&
              this.portRequestNumber.equals(other.getPortRequestNumber()))) &&
            ((this.resellerPartnerIdInfo==null && other.getResellerPartnerIdInfo()==null) || 
             (this.resellerPartnerIdInfo!=null &&
              this.resellerPartnerIdInfo.equals(other.getResellerPartnerIdInfo()))) &&
            ((this.supplementalCode==null && other.getSupplementalCode()==null) || 
             (this.supplementalCode!=null &&
              this.supplementalCode.equals(other.getSupplementalCode()))) &&
            ((this.billingNameInfo==null && other.getBillingNameInfo()==null) || 
             (this.billingNameInfo!=null &&
              this.billingNameInfo.equals(other.getBillingNameInfo()))) &&
            ((this.billAddressInfo==null && other.getBillAddressInfo()==null) || 
             (this.billAddressInfo!=null &&
              this.billAddressInfo.equals(other.getBillAddressInfo()))) &&
            ((this.ssnTaxIdInfo==null && other.getSsnTaxIdInfo()==null) || 
             (this.ssnTaxIdInfo!=null &&
              this.ssnTaxIdInfo.equals(other.getSsnTaxIdInfo()))) &&
            ((this.ospBan==null && other.getOspBan()==null) || 
             (this.ospBan!=null &&
              this.ospBan.equals(other.getOspBan()))) &&
            ((this.passwordPin==null && other.getPasswordPin()==null) || 
             (this.passwordPin!=null &&
              this.passwordPin.equals(other.getPasswordPin()))) &&
            ((this.remarks==null && other.getRemarks()==null) || 
             (this.remarks!=null &&
              this.remarks.equals(other.getRemarks()))) &&
            ((this.newNetWorkServiceProviderInfo==null && other.getNewNetWorkServiceProviderInfo()==null) || 
             (this.newNetWorkServiceProviderInfo!=null &&
              this.newNetWorkServiceProviderInfo.equals(other.getNewNetWorkServiceProviderInfo()))) &&
            ((this.oldNetWorkServiceProviderInfo==null && other.getOldNetWorkServiceProviderInfo()==null) || 
             (this.oldNetWorkServiceProviderInfo!=null &&
              this.oldNetWorkServiceProviderInfo.equals(other.getOldNetWorkServiceProviderInfo()))) &&
            ((this.implementationPartnerInfo==null && other.getImplementationPartnerInfo()==null) || 
             (this.implementationPartnerInfo!=null &&
              this.implementationPartnerInfo.equals(other.getImplementationPartnerInfo()))) &&
            ((this.portDueDateTimeInfo==null && other.getPortDueDateTimeInfo()==null) || 
             (this.portDueDateTimeInfo!=null &&
              this.portDueDateTimeInfo.equals(other.getPortDueDateTimeInfo()))) &&
            ((this.responseType==null && other.getResponseType()==null) || 
             (this.responseType!=null &&
              this.responseType.equals(other.getResponseType()))) &&
            ((this.reasonCode==null && other.getReasonCode()==null) || 
             (this.reasonCode!=null &&
              this.reasonCode.equals(other.getReasonCode()))) &&
            ((this.reasonText==null && other.getReasonText()==null) || 
             (this.reasonText!=null &&
              this.reasonText.equals(other.getReasonText()))) &&
            ((this.delayCode==null && other.getDelayCode()==null) || 
             (this.delayCode!=null &&
              this.delayCode.equals(other.getDelayCode()))) &&
            ((this.messageCode==null && other.getMessageCode()==null) || 
             (this.messageCode!=null &&
              this.messageCode.equals(other.getMessageCode()))) &&
            ((this.messageText==null && other.getMessageText()==null) || 
             (this.messageText!=null &&
              this.messageText.equals(other.getMessageText()))) &&
            ((this.actionCode==null && other.getActionCode()==null) || 
             (this.actionCode!=null &&
              this.actionCode.equals(other.getActionCode()))) &&
            ((this.activityRecordList==null && other.getActivityRecordList()==null) || 
             (this.activityRecordList!=null &&
              this.activityRecordList.equals(other.getActivityRecordList()))) &&
            ((this.autoRejectStatus==null && other.getAutoRejectStatus()==null) || 
             (this.autoRejectStatus!=null &&
              this.autoRejectStatus.equals(other.getAutoRejectStatus()))) &&
            ((this.replyPortOutRequestStatus==null && other.getReplyPortOutRequestStatus()==null) || 
             (this.replyPortOutRequestStatus!=null &&
              this.replyPortOutRequestStatus.equals(other.getReplyPortOutRequestStatus()))) &&
            ((this.portCancelInd==null && other.getPortCancelInd()==null) || 
             (this.portCancelInd!=null &&
              this.portCancelInd.equals(other.getPortCancelInd()))) &&
            ((this.messageCreationTime==null && other.getMessageCreationTime()==null) || 
             (this.messageCreationTime!=null &&
              this.messageCreationTime.equals(other.getMessageCreationTime())));
        __equalsCalc = null;
        return _equals;
    }

    private boolean __hashCodeCalc = false;
    public synchronized int hashCode() {
        if (__hashCodeCalc) {
            return 0;
        }
        __hashCodeCalc = true;
        int _hashCode = 1;
        if (getMessageId() != null) {
            _hashCode += getMessageId().hashCode();
        }
        if (getMessageTypeCode() != null) {
            _hashCode += getMessageTypeCode().hashCode();
        }
        if (getMessageTypeDesc() != null) {
            _hashCode += getMessageTypeDesc().hashCode();
        }
        if (getMessageStatusCode() != null) {
            _hashCode += getMessageStatusCode().hashCode();
        }
        if (getMessageStatusDesc() != null) {
            _hashCode += getMessageStatusDesc().hashCode();
        }
        if (getMdn() != null) {
            _hashCode += getMdn().hashCode();
        }
        if (getPortId() != null) {
            _hashCode += getPortId().hashCode();
        }
        if (getPortRequestNumber() != null) {
            _hashCode += getPortRequestNumber().hashCode();
        }
        if (getResellerPartnerIdInfo() != null) {
            _hashCode += getResellerPartnerIdInfo().hashCode();
        }
        if (getSupplementalCode() != null) {
            _hashCode += getSupplementalCode().hashCode();
        }
        if (getBillingNameInfo() != null) {
            _hashCode += getBillingNameInfo().hashCode();
        }
        if (getBillAddressInfo() != null) {
            _hashCode += getBillAddressInfo().hashCode();
        }
        if (getSsnTaxIdInfo() != null) {
            _hashCode += getSsnTaxIdInfo().hashCode();
        }
        if (getOspBan() != null) {
            _hashCode += getOspBan().hashCode();
        }
        if (getPasswordPin() != null) {
            _hashCode += getPasswordPin().hashCode();
        }
        if (getRemarks() != null) {
            _hashCode += getRemarks().hashCode();
        }
        if (getNewNetWorkServiceProviderInfo() != null) {
            _hashCode += getNewNetWorkServiceProviderInfo().hashCode();
        }
        if (getOldNetWorkServiceProviderInfo() != null) {
            _hashCode += getOldNetWorkServiceProviderInfo().hashCode();
        }
        if (getImplementationPartnerInfo() != null) {
            _hashCode += getImplementationPartnerInfo().hashCode();
        }
        if (getPortDueDateTimeInfo() != null) {
            _hashCode += getPortDueDateTimeInfo().hashCode();
        }
        if (getResponseType() != null) {
            _hashCode += getResponseType().hashCode();
        }
        if (getReasonCode() != null) {
            _hashCode += getReasonCode().hashCode();
        }
        if (getReasonText() != null) {
            _hashCode += getReasonText().hashCode();
        }
        if (getDelayCode() != null) {
            _hashCode += getDelayCode().hashCode();
        }
        if (getMessageCode() != null) {
            _hashCode += getMessageCode().hashCode();
        }
        if (getMessageText() != null) {
            _hashCode += getMessageText().hashCode();
        }
        if (getActionCode() != null) {
            _hashCode += getActionCode().hashCode();
        }
        if (getActivityRecordList() != null) {
            _hashCode += getActivityRecordList().hashCode();
        }
        if (getAutoRejectStatus() != null) {
            _hashCode += getAutoRejectStatus().hashCode();
        }
        if (getReplyPortOutRequestStatus() != null) {
            _hashCode += getReplyPortOutRequestStatus().hashCode();
        }
        if (getPortCancelInd() != null) {
            _hashCode += getPortCancelInd().hashCode();
        }
        if (getMessageCreationTime() != null) {
            _hashCode += getMessageCreationTime().hashCode();
        }
        __hashCodeCalc = false;
        return _hashCode;
    }

    // Type metadata
    private static org.apache.axis.description.TypeDesc typeDesc =
        new org.apache.axis.description.TypeDesc(WholesalePortMessageTypeInfoType.class, true);

    static {
        typeDesc.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "WholesalePortMessageTypeInfoType"));
        org.apache.axis.description.ElementDesc elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageId");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageId"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageTypeCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageTypeCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortMessageTypeCode"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageTypeDesc");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageTypeDesc"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortMessageTypeDescription"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageStatusCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageStatusCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "MessageActivityCode"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageStatusDesc");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageStatusDesc"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "MessageStatus"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("mdn");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "mdn"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("portId");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "portId"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("portRequestNumber");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "portRequestNumber"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("resellerPartnerIdInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "resellerPartnerIdInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ResellerPartnerIdInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("supplementalCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "supplementalCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "SupplementalMessageTypeIdentifier"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("billingNameInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "billingNameInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "BillingNameInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("billAddressInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "billAddressInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "BillingAddressInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("ssnTaxIdInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ssnTaxIdInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "SsnTaxIdChoiceTypeType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("ospBan");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ospBan"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("passwordPin");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "passwordPin"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("remarks");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "remarks"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("newNetWorkServiceProviderInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "newNetWorkServiceProviderInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "NetworkServiceProviderInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("oldNetWorkServiceProviderInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "oldNetWorkServiceProviderInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "NetworkServiceProviderInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("implementationPartnerInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "implementationPartnerInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ImplementationPartnerInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("portDueDateTimeInfo");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "portDueDateTimeInfo"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortDueDateTimeInfoType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("responseType");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "responseType"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortResponseTypeCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("reasonCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "reasonCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("reasonText");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "reasonText"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("delayCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "delayCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortDelayCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageText");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageText"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("actionCode");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "actionCode"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "PortActionTypeCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("activityRecordList");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "activityRecordList"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ActivityRecordListType"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("autoRejectStatus");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "autoRejectStatus"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "SendAutoRejectTypeCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("replyPortOutRequestStatus");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "replyPortOutRequestStatus"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "ReplyPortOutRequestCode"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("portCancelInd");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "portCancelInd"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"));
        elemField.setMinOccurs(0);
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName("messageCreationTime");
        elemField.setXmlName(new javax.xml.namespace.QName("http://integration.sprint.com/interfaces/queryPortMessage/v1/queryPortMessage.xsd", "messageCreationTime"));
        elemField.setXmlType(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "dateTime"));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
    }

    /**
     * Return type metadata object
     */
    public static org.apache.axis.description.TypeDesc getTypeDesc() {
        return typeDesc;
    }

    /**
     * Get Custom Serializer
     */
    public static org.apache.axis.encoding.Serializer getSerializer(
           java.lang.String mechType, 
           java.lang.Class _javaType,  
           javax.xml.namespace.QName _xmlType) {
        return 
          new  org.apache.axis.encoding.ser.BeanSerializer(
            _javaType, _xmlType, typeDesc);
    }

    /**
     * Get Custom Deserializer
     */
    public static org.apache.axis.encoding.Deserializer getDeserializer(
           java.lang.String mechType, 
           java.lang.Class _javaType,  
           javax.xml.namespace.QName _xmlType) {
        return 
          new  org.apache.axis.encoding.ser.BeanDeserializer(
            _javaType, _xmlType, typeDesc);
    }

}
